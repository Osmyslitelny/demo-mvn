1) readme
2) gitignore
3) we have runner (check it)
4) все скип - кор лэер?
5) run from idea.
6) create testng.xml
    testng maven run from cmd
    (mvn clean test -Dsurefire.suiteXmlFiles=src/test/resources/testng.xml)
    surefire-plugin (maven surefire plugin pom testng) (https://maven.apache.org/surefire/maven-surefire-plugin/examples/testng.html)
    as application


 =============================
 Поздороваться. (длинное)
 Структура будущего.

 Вступление. (минута + тудый сюдый)
 ТАФ - визуал?
 Теория - практика. (лэеры, показать) Двинуть назад?
 Много кликов (каждый шаг)
 Откуда поисковик? тесты пишутся - чтобы что-то тестировать
 Селениум - икспасы (или нет) - содержание тестов
 =============================

 Мы начинаем серию видео. В них мы будем затрагивать темы которые так или иначе связанны с автотестингом.
 аспекты. теория и практика
 Цель видео - в комфортной и доступной форме поделиться практическими и теоретическими знаниями, по решению
 типовых задач, с которым сталкивается каждый, кто начинает тестирование с 0. Это не значит что все оговореное
 является золотым стандартом и подходит обсалютно для всех. Однако в большиснтве случаев это прекрасный вариант
 для старта с 0 а считаные минуты. Своего рода прекрасная визуализация принципа парето,
 когда застратив минимальное количество усилий, мы получим 80% выгоды. Естественно вся магия и красота будет заключаться
 в оставшихся 20%, и она будет забирать 80% времени. Но чтобы к ним подобраться, все же надо с чего-то начинать.
 И как раз в этом старте, мы вам и поможем. Мы попробуем степ бай степ создать струкутур, которая как базисный каркас подойдет
 в большиснвту случаев. И сегодняшнее наше видео, будет посвящено Написанию тестового ферймворка.

 Что же такое тестовый фреймворк? Зачем он нужен, а главное. какую проблему решает? Ответ на эти и последующие вопросы не только помогут нам понять
 что мы пишем, но и помогут нам это создать.

 Цель фреймворка - создание механизма/тулы/системы, решающая проблему теста (проверки) чего-либо. Не скрипты.
 Для любой системы присуща некоторая структура. Структурой ферймворка являются лэеры. В большинстве фреймворков вы обнаружите
 наличие всех иили почти всех уровней. Они могут отличаться названиями, имплементацием, но это не сильно важно, т.к. главное это
 какую задачи решает каждый левел. Изучив вопрос вы увидите что названия и комплектация уровней разнится от источников, но общие идеи всегда повторяются.
 Позволю себе более обще выделить 3 уровня:
 Работа с данными (дата лэер)
 Работа с бизнес объектами (доменный леер)
 Коровый леер (кор)
 Не будем тратить время на их разбор, а познокмимся с ними на практике.
 Представим абстрактно конечный вариант нашего фреймворка. Мы что-то как-то ввели, произошло действие (тест) и мы получили результат (успех проверки).
 Будем делать на примере тестирования поисковика.


 (демо с текстом)
 1) Я хочу чтоб наш флоу происходил по нажатии "кнопки". Кнопка/команда которая все это запостит. В джава чаще всего подобной кнопкой является сборщик. (создал проект)
 2) Следующий этап это нейкая проверка (тест). Чтоб его сделать не придумываю велосипед, тяну тестнг. (делаю изи тест)
 3) Говорю что мы уже имеем (репорт, тестранер, тест-дата)
 4) Переходим к селениуму (тест на селениуме) (все в тесте и сетаю)
 5) Разделаю по папкам обзываю к какому леерам
 =================
 Заменяю селениум на селеноид.
 Рядом апи тест сделаю через ресташурд.
 =================
 несколько видос запуска (плагин, тест нг, тестнг раннер, идея)
 градл + джэйюнит5 мини тест на 2+2
 сказать про селеноид.